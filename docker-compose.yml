services:
  #postgres:
  #  image: postgres:latest
  #  container_name: postgres
  #  restart: always
  #  environment:
  #    POSTGRES_USER: ${DB_USER}
  #    POSTGRES_PASSWORD: ${DB_PASSWORD}
  #    POSTGRES_DB: ${DB_NAME}
  #  ports:
  #    - "5432:5432"
  #  volumes:
  #    - postgres-data:/var/lib/postgresql/data
  #  networks:
  #    - backend

  sonarqube_db:
    image: postgres:latest
    container_name: sonarqube_db
    restart: always
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    ports:
      - "5433:5432"
    volumes:
      - sonarqube-db-data:/var/lib/postgresql/data
    networks:
      - backend
      - jenkins_network

  #pgadmin:
  #  image: dpage/pgadmin4
  #  container_name: pgadmin
  #  restart: always
  #  env_file:
  #    - .env
  #  ports:
  #    - "5000:80"
  #  depends_on:
  #    - postgres
  #  volumes:
  #    - pgadmin-data:/var/lib/pgadmin
  #  networks:
  #    - backend

  # postgres-exporter:
  #   image: wrouesnel/postgres_exporter:latest
  #   environment:
  #     DATA_SOURCE_NAME: ${DATA_SOURCE_NAME}
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "9187:9187"
  #   networks:
  #     - backend

  #redis:
  #  image: redis:latest
  #  container_name: redis
  #  restart: unless-stopped
  #  ports:
  #    - "6379:6379"
  #  volumes:
  #    - redis-data:/data
  #  networks:
  #    - backend

  # redis-exporter:
  #   image: oliver006/redis_exporter:latest
  #   command: --redis.addr=redis:6379
  #   depends_on:
  #     - redis
  #   ports:
  #     - "9121:9121"
  #   networks:
  #     - backend

  #rabbitmq:
  #  image: rabbitmq:management
  #  container_name: rabbitmq
  #  restart: always
  #  ports:
  #    - "5672:5672"
  #    - "15672:15672" # RabbitMQ management console
  #  env_file:
  #    - .env
  #  volumes:
  #    - rabbitmq-data:/var/lib/rabbitmq
  #  networks:
  #    - backend

  # rabbitmq-exporter:
  #   image: kbudde/rabbitmq-exporter:latest
  #   env_file:
  #     - .env
  #   depends_on:
  #     - rabbitmq
  #   ports:
  #     - "9419:9419"
  #   networks:
  #     - backend
  #   healthcheck:
  #     disable: true

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   build: ./nginx/
  #   restart: always
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - nginx-config:/etc/nginx
  #   depends_on:
  #     - web_server
  #     - frontend_web
  #   networks:
  #     - backend

  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    restart: always
    ports:
      - "8082:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/bin/docker
    environment:
      - TZ=Europe/Zurich
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    networks:
      - jenkins_network

  sonarqube:
    image: sonarqube:lts-community
    command: >
      -Dsonar.ce.javaOpts=-Xmx1192m
      -Dsonar.web.javaOpts=-Xmx1192m
    restart: unless-stopped
    container_name: sonarqube
    depends_on:
      - sonarqube_db
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqube_db:5432/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
      - SONAR_ES_JAVA_OPTS=-Xms512m -Xmx1g
    ports:
      - 9001:9000
    volumes:
      - sonar-data:/opt/sonarqube/data
      - sonar-extensions:/opt/sonarqube/extensions
      - sonar-logs:/opt/sonarqube/logs
    networks:
      - jenkins_network

  #web_server:
  #  build:
  #    context: .
  #    dockerfile: Dockerfile
  #  env_file:
  #    - .env
  #  container_name: golang_web_server
  #  restart: always
  #  ports:
  #    - "1323:1323"
  #  depends_on:
  #    - postgres
  #    - redis
  #    - rabbitmq
  #  networks:
  #    - backend
  #    - frontend

  frontend_web:
    build:
      context: ./web/devseconnect/
      dockerfile: Dockerfile
    environment:
      - ORIGIN=http://localhost:3000
    container_name: svelte_web
    restart: always
    ports:
      - "4000:3000"
    networks:
      - frontend
      - backend

  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   restart: always
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - backend

  # grafana:
  #   image: grafana/grafana:latest
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - backend

volumes:
  #postgres-data:
  #  name: postgres-data
  #redis-data:
  #  name: redis-data
  #rabbitmq-data:
  #  name: rabbitmq-data
  # nginx-config:
  #   name: nginx-config
  #pgadmin-data:
  #  name: pgadmin-data
  # grafana-data:
  #   name: grafana-data
  jenkins_home:
    name: jenkins_home
  sonar-data:
    name: sonar_data
  sonar-extensions:
    name: sonar_extensions
  sonar-logs:
    name: sonar_logs
  sonarqube-db-data:
    name: sonarqube-db-data
  # prometheus.yml:
  #   name: prometheus.yml

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  jenkins_network:
    driver: bridge
